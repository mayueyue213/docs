(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{494:function(e,t,r){"use strict";r.r(t);var a=r(23),v=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"性能优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#性能优化"}},[e._v("#")]),e._v(" 性能优化")]),e._v(" "),r("p",[e._v("首先需要了解性能优化的背景，为什么需要优化，然后如何去优化，如何去评估优化效果。")]),e._v(" "),r("h2",{attrs:{id:"why"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#why"}},[e._v("#")]),e._v(" Why")]),e._v(" "),r("p",[e._v("页面的显示和交互等过程，让用户感受到不爽了，从而影响到了用户的留存转化，影响到商业目标等的达成。")]),e._v(" "),r("p",[e._v("是什么因素让用户觉得不爽？")]),e._v(" "),r("p",[e._v("思考并解决这个问题，有了 "),r("a",{attrs:{href:"https://web.dev/why-speed-matters/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Why does speed matter?"),r("OutboundLink")],1),e._v(" 这方面对于网站的表现对用户体验的影响的研究，有了 "),r("a",{attrs:{href:"https://web.dev/rail/",target:"_blank",rel:"noopener noreferrer"}},[e._v("RAIL"),r("OutboundLink")],1),e._v(" 这样的评估方案。")]),e._v(" "),r("p",[e._v("性能优化，就是基于分析出的原因，探索解决方案，研究怎样通过技术手段，使得页面的表现更加满足用户的预期，改善用户体验。")]),e._v(" "),r("h2",{attrs:{id:"性能分析"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#性能分析"}},[e._v("#")]),e._v(" 性能分析")]),e._v(" "),r("p",[e._v("性能分析工具能够直观地给出性能优化的建议，性能优化时，应当参考着分析结果进行选择性优化。")]),e._v(" "),r("p",[e._v("性能分析的工具，在 "),r("a",{attrs:{href:"https://developers.google.com/web/fundamentals/performance/speed-tools?hl=zh_cn",target:"_blank",rel:"noopener noreferrer"}},[e._v("How To Think About Speed Tools"),r("OutboundLink")],1),e._v(" 进行了较为全面的介绍。\n最基础的是 Chrome 自带的 Performance 和 Lighthouse，在 Chrome 的开发者工具中，Lighthouse 或者 Audits 标签下可以看到 "),r("code",[e._v("Lighthouse")]),e._v("。")]),e._v(" "),r("p",[e._v("性能优化是系统性工程，在具体优化时，应当结合具体分析结果，有重点地，渐进地优化，避免不切实际的全面优化或者说从头优化。不过在认知形成和基础知识掌握上，我们确实可以做较为系统的梳理，了解可能的优化点，以作参考。")]),e._v(" "),r("h2",{attrs:{id:"使用缓存"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#使用缓存"}},[e._v("#")]),e._v(" 使用缓存")]),e._v(" "),r("p",[e._v("客户端的缓存，CDN 的缓存等")]),e._v(" "),r("h4",{attrs:{id:"本地缓存使用"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#本地缓存使用"}},[e._v("#")]),e._v(" 本地缓存使用")]),e._v(" "),r("ul",[r("li",[e._v("LocalStorage(ls) 缓存：可使用 ls 缓存长期不会改变的静态资源，比如 "),r("a",{attrs:{href:"https://www.baidu.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("百度"),r("OutboundLink")],1),e._v(" 就缓存了")]),e._v(" "),r("li",[e._v("Cookie: Cookie 就是谨慎使用，注意 Cookie 的大小，毕竟请求会带上 Cookie，数据量不小的")])]),e._v(" "),r("h4",{attrs:{id:"缓存策略选择"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#缓存策略选择"}},[e._v("#")]),e._v(" 缓存策略选择")]),e._v(" "),r("p",[e._v("既要保证有效更新，又要保证充分利用。根据不同的更新频繁程度，选择合适的缓存策略，对于有效利用缓存至关重要。")]),e._v(" "),r("p",[e._v("如今的主流方案，基本上都是基本上都是 html 文件在源站服务器，其他静态资源在 CDN。在源站服务器，就适合设置协商缓存，比如")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("Cache-Control: no-cache\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br")])]),r("p",[e._v("而 CDN 上的静态资源，就应当设置较长的有效期。")]),e._v(" "),r("p",[e._v("关于 HTTP 缓存可参考 "),r("RouterLink",{attrs:{to:"/docs/manual/networking/cache.html"}},[e._v("HTTP 缓存")]),e._v("。")],1),e._v(" "),r("h2",{attrs:{id:"各类文件优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#各类文件优化"}},[e._v("#")]),e._v(" 各类文件优化")]),e._v(" "),r("p",[e._v("文件的优化，主要是从两方面切入")]),e._v(" "),r("ul",[r("li",[e._v("减少文件大小")]),e._v(" "),r("li",[e._v("减少请求次数")])]),e._v(" "),r("p",[e._v("具体来说可以有以下优化方式")]),e._v(" "),r("ul",[r("li",[e._v("js 等文件的提取和拆分")]),e._v(" "),r("li",[e._v("各类文件压缩")]),e._v(" "),r("li",[e._v("使用 TreeShaking 等方式去掉未使用代码")]),e._v(" "),r("li",[e._v("CSR，Prerender 和 SSR 方案的合理选择")])]),e._v(" "),r("p",[e._v("可参考 "),r("RouterLink",{attrs:{to:"/docs/manual/perfomance/image.html"}},[e._v("图片优化")]),e._v(" 和 "),r("RouterLink",{attrs:{to:"/docs/manual/perfomance/css.html"}},[e._v("CSS 优化")])],1),e._v(" "),r("h2",{attrs:{id:"渲染流程优化"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#渲染流程优化"}},[e._v("#")]),e._v(" 渲染流程优化")]),e._v(" "),r("ul",[r("li",[e._v("预加载，懒加载")]),e._v(" "),r("li",[e._v("合理组织代码相对位置,减少阻塞")]),e._v(" "),r("li",[e._v("减少重绘和回流")]),e._v(" "),r("li",[e._v("CDN 多域名，提升并行加载数")]),e._v(" "),r("li",[e._v("defer, async，异步加载，延迟执行")]),e._v(" "),r("li",[e._v("关注关键路径渲染")])]),e._v(" "),r("p",[e._v("可参考 "),r("RouterLink",{attrs:{to:"/docs/manual/browser/render.html"}},[e._v("渲染流程")])],1),e._v(" "),r("h2",{attrs:{id:"其他"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[e._v("#")]),e._v(" 其他")]),e._v(" "),r("ul",[r("li",[e._v("使用 HTTP/2.0")]),e._v(" "),r("li",[e._v("dns prefetch")])])])}),[],!1,null,null,null);t.default=v.exports}}]);