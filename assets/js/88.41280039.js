(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{480:function(t,e,o){"use strict";o.r(e);var _=o(23),v=Object(_.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"csrf"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#csrf"}},[t._v("#")]),t._v(" CSRF")]),t._v(" "),o("p",[t._v("CSRF，Cross Site Request Forgery，中文是跨站点请求伪造。CSRF是真的跨站了，不像XSS那样，说跨站又不跨站，不成样子。CSRF 的基本流程如下")]),t._v(" "),o("ul",[o("li",[t._v("用户登录a.com，并保留了登录凭证 Cookie")]),t._v(" "),o("li",[t._v("攻击者引诱受害者访问了b.com")]),t._v(" "),o("li",[t._v("b.com 向 a.com 发送请求，浏览器会默认携带 a.com 的 Cookie")]),t._v(" "),o("li",[t._v("a.com接收到请求后，误以为是用户发送的正常请求，按照正常逻辑处理，但是这并不是真实用户期望的")])]),t._v(" "),o("p",[t._v("CSRF的关键在于“伪造请求”，伪造请求并不一定是第三方网站的，只是第三方网站更容易被攻击者掌握，更普遍而已。伪造能够实现的原因是 b.com 向 a.com 请求的时候，会带上 a.com 的 cookie。那么只要用户同时访问了正常网站和第三方攻击网站，攻击就有可能发生。")]),t._v(" "),o("p",[o("strong",[t._v("CSRF的防范")]),t._v("：抓住两个关键点 "),o("strong",[t._v("第三方网站")]),t._v("，"),o("strong",[t._v("cookie")]),t._v("。有以下防范方案")]),t._v(" "),o("table",[o("thead",[o("tr",[o("th",[t._v("方案")]),t._v(" "),o("th",[t._v("原理")])])]),t._v(" "),o("tbody",[o("tr",[o("td",[t._v("同源检测")]),t._v(" "),o("td",[t._v("利用 Referer和Origin检查判断请求来源")])]),t._v(" "),o("tr",[o("td",[t._v("CSRF Token")]),t._v(" "),o("td",[t._v("第三方网站无法直接读取cookie")])]),t._v(" "),o("tr",[o("td",[t._v("双重 cookie")]),t._v(" "),o("td",[t._v("第三方网站无法直接读取cookie")])]),t._v(" "),o("tr",[o("td",[t._v("Samesite Cookie")]),t._v(" "),o("td",[t._v("从源头上解决，限制第三方网站利用cookie")])])])]),t._v(" "),o("p",[t._v("csrf 可参考"),o("a",{attrs:{href:"https://tech.meituan.com/2018/10/11/fe-security-csrf.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("前端安全系列（二）：如何防止CSRF攻击？"),o("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=v.exports}}]);