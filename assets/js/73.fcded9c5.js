(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{433:function(t,v,_){"use strict";_.r(v);var a=_(23),s=Object(a.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"知识概要"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#知识概要"}},[t._v("#")]),t._v(" 知识概要")]),t._v(" "),_("p",[t._v("自定向下梳理各个层次的内容，串联各个层级的关键知识点。先形成整体的印象，然后再专题研究一些与前端相关的核心内容。然后是漫长的...积累，直到量变到质变，从学习到赋能...扯远了哈。")]),t._v(" "),_("p",[t._v("OSI 七层协议模型，有理解的意义，但需要有更深的实践之后，才可能较好地理解其深刻意义。TCP/IP 就是将下面两层合并称为网络接口层，目前按照综合的五层协议去理解即可")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",{staticStyle:{"text-align":"center"}},[t._v("层级")]),t._v(" "),_("th",{staticStyle:{"text-align":"left"}},[t._v("核心协议")])])]),t._v(" "),_("tbody",[_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("应用层")]),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("HTTP、DNS、DHCP、SSH、Telnet、FTP")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("传输层")]),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("TCP、UDP")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("网络层")]),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("IP、ICMP")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("链路层")]),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("ARP、RARP")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"center"}},[t._v("物理层")]),t._v(" "),_("td",{staticStyle:{"text-align":"left"}},[t._v("-")])])])]),t._v(" "),_("h2",{attrs:{id:"应用层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#应用层"}},[t._v("#")]),t._v(" 应用层")]),t._v(" "),_("p",[t._v("应用层主要的协议有 HTTP，DNS，DHCP，SSH 等")]),t._v(" "),_("h4",{attrs:{id:"http"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" HTTP")]),t._v(" "),_("p",[t._v("HTTP 需要结合其几个历史版本的发展进行了解，了解每个版本增加了一些什么内容。")]),t._v(" "),_("ul",[_("li",[t._v("HTTP\n"),_("ul",[_("li",[t._v("HTTP/0.9\n"),_("ul",[_("li",[t._v("单行协议")])])]),t._v(" "),_("li",[t._v("HTTP/1.0\n"),_("ul",[_("li",[t._v("支持多种文件\n"),_("ul",[_("li",[t._v("增加 header: 客户端请求协商，服务端资源描述\n"),_("ul",[_("li",[t._v("Status Code 表示协商结果")])])])])])])]),t._v(" "),_("li",[t._v("HTTP/1.1\n"),_("ul",[_("li",[t._v("长连接\n"),_("ul",[_("li",[t._v("队头阻塞\n"),_("ul",[_("li",[t._v("Chrome 单域名 6 个并发上限\n"),_("ul",[_("li",[t._v("CDN 多域名")])])])])])])]),t._v(" "),_("li",[t._v("虚拟主机多域名\n"),_("ul",[_("li",[t._v("Host")])])]),t._v(" "),_("li",[t._v("Chunk Transfer")]),t._v(" "),_("li",[t._v("Cookie")])])]),t._v(" "),_("li",[t._v("HTTP/2\n"),_("ul",[_("li",[t._v("多路复用：二进制分帧层拆分 HTTP 包，交错传输，客户端设置优先级请求，服务端优先级处理返回，客户端拼接返回。")])])]),t._v(" "),_("li",[t._v("HTTP/3\n"),_("ul",[_("li",[t._v("QUIC：基于 UDP，替换 HTTP 下层协议 TCP")])])])])])]),t._v(" "),_("h4",{attrs:{id:"dns"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dns"}},[t._v("#")]),t._v(" DNS")]),t._v(" "),_("p",[t._v("DNS 用于根据域名获取 IP 地址，需要了解常规的 DNS，以及 CDN DNS 和 HTTP DNS，还需要了解 SLB。")]),t._v(" "),_("ul",[_("li",[_("p",[_("strong",[t._v("HttpDNS")]),t._v("：传统的 DNS 解析，在数据缓存更新，域名转发，域名更新(如机房切换)等存在一些问题。HTTP DNS，就是不走传统 DNS，自己搭建基于 HTTP 的 DNS 服务器集群。一般 HttpDNS 用于手机端应用，使用 SDK 加载缓存 HttpDNS Server 的 IP 列表，通过 HTTP 绕过传统 DNS 获得 IP。")])]),t._v(" "),_("li",[_("p",[_("strong",[t._v("CdnDNS")]),t._v(": CDN 一般会在权威 DNS 服务器中设置 CNAME，当访问某个域名，返回的不再是源站的 IP 地址，而是返回一个 CDN 域名，本地 DNS 服务器拿到这个域名之后，去访问 CDN 自己搭建的权威 DNS 服务器，这个 DNS 服务器再次返回负载均衡器的 CNAME，本地 DNS 再次请求负载均衡器即可得到缓存服务器的 IP。在获取到缓存服务器的 IP 之后，再依次访问边缘节点，区域节点，中心节点，最后回源。\n"),_("mg",{attrs:{src:"/images/networking/cdn-dns.jpg",alt:"Vue"}})],1)])]),t._v(" "),_("h4",{attrs:{id:"dhcp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dhcp"}},[t._v("#")]),t._v(" DHCP")]),t._v(" "),_("p",[t._v("动态主机协议，用以在局域网中设备接入分配 IP，基本的原理是接入设备和 DHCP Server 通过广播进行通信协商，协商好之后通过广播广而告之。")]),t._v(" "),_("h2",{attrs:{id:"传输层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#传输层"}},[t._v("#")]),t._v(" 传输层")]),t._v(" "),_("p",[t._v("在传输层与应用层间通过套接字进行连接，端口号作为套接字的标识，通过端口号实现多路复用和多路分解，从而实现数据正确交付到不同的应用。")]),t._v(" "),_("h4",{attrs:{id:"tcp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#tcp"}},[t._v("#")]),t._v(" TCP")]),t._v(" "),_("p",[t._v("TCP 是面向连接的服务，保证数据的可靠交付。")]),t._v(" "),_("ul",[_("li",[t._v("可靠数据传输\n"),_("ul",[_("li",[t._v("回退 N 步：还有未确认数据，但发送方的定时器超时都未收到任何窗口内数据包的确认，重传 N 个")]),t._v(" "),_("li",[t._v("选择重传：只重传丢失的分组")]),t._v(" "),_("li",[t._v("滑动窗口：允许的已发送未被确认分组数大小，这是流量控制的一种方式")])])]),t._v(" "),_("li",[t._v("面向连接：常说的三次握手。连接就是双方先简单沟通一下，各自建立一定的数据结构来维护双方交互的状态。")]),t._v(" "),_("li",[t._v("拥塞控制\n"),_("ul",[_("li",[t._v("拥塞窗口：用以限制发送流量的速率")]),t._v(" "),_("li",[t._v("快速重传：连续收到 3 个相同序号的 ACK\n"),_("ul",[_("li",[t._v("冗余ACK：下一个待确认分组的响应 ACK")])])]),t._v(" "),_("li",[t._v("慢启动")])])])]),t._v(" "),_("h4",{attrs:{id:"udp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#udp"}},[t._v("#")]),t._v(" UDP")]),t._v(" "),_("p",[t._v("UDP 用户数据包，除了多路复用和多路分解，以及少量的差错检测(校验和)，几乎没有对 IP 增加别的东西。\nUDP 适用于一些对于交付可靠性要求不那么高的程序，通过 UDP 能够降低时延，减少资源消耗。")]),t._v(" "),_("ul",[_("li",[t._v("无连接")]),t._v(" "),_("li",[t._v("无状态")]),t._v(" "),_("li",[t._v("不保证可靠交付")])]),t._v(" "),_("p",[t._v("UDP 相对与 TCP，应用层程序能做的控制更多，很多交互，重传相关的事情可以在应用层去选择策略去做，QUIC 就是使用 UDP，将一部分类似 TCP 功能的实现交给了应用层去实现。")]),t._v(" "),_("p",[t._v("DNS 选择 UDP，则是因为其不需要建立连接，可以尽量减少时延，而可靠交付，对于 DNS 并不那么重要。")]),t._v(" "),_("h2",{attrs:{id:"网络层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#网络层"}},[t._v("#")]),t._v(" 网络层")]),t._v(" "),_("p",[t._v("网络层主要关注三个内容，IP，ICMP 和 路由器。")]),t._v(" "),_("p",[t._v("IPv6 相比于 IPv4")]),t._v(" "),_("ul",[_("li",[t._v("IPv6 地址空间更大，128")]),t._v(" "),_("li",[t._v("4 是变长头部，6 固定 40 字节")]),t._v(" "),_("li",[t._v("兼容性，双栈技术，隧道技术和 NAT-PT(Network Address Translation - Protocol Translation) 支持")]),t._v(" "),_("li",[t._v("强制集成 IPsec，提升安全性")])]),t._v(" "),_("h2",{attrs:{id:"链路层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#链路层"}},[t._v("#")]),t._v(" 链路层")]),t._v(" "),_("p",[t._v("链路，是指连接相邻结点的通信信道，链路层要解决的是共享信道上消息传输的问题，基本问题有")]),t._v(" "),_("ul",[_("li",[t._v("发给谁？")]),t._v(" "),_("li",[t._v("出错了怎么办？")]),t._v(" "),_("li",[t._v("大家都要用信道怎么办？")])]),t._v(" "),_("p",[t._v("由此产生了链路层相关的多种协议。")]),t._v(" "),_("h4",{attrs:{id:"发给谁"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#发给谁"}},[t._v("#")]),t._v(" 发给谁")]),t._v(" "),_("p",[t._v("解决这个问题对应的处理叫做 "),_("strong",[t._v("成帧")]),t._v("，梦想成帧的这个成帧")]),t._v(" "),_("blockquote",[_("p",[t._v("成帧：接收到上层的数据包之后，进一步封装，添加链路层目标地址，源地址进行标识")])]),t._v(" "),_("p",[_("txt",{attrs:{red:""}},[t._v("图片占位")])],1),t._v(" "),_("p",[t._v("链路层使用 6 个字节的地址标识设备，由于链路层的主要功能是解决媒体访问控制(Media Access Control)的问题，这个地址称为 MAC 地址，叫做链路层地址，物理地址更合适也行。")]),t._v(" "),_("p",[t._v("这里有一个前提，需要知道目标 MAC 地址，这涉及到的是 ARP 协议。")]),t._v(" "),_("h4",{attrs:{id:"出错了怎么办"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#出错了怎么办"}},[t._v("#")]),t._v(" 出错了怎么办")]),t._v(" "),_("p",[t._v("对应的链路层基本服务叫做 "),_("strong",[t._v("差错检测")])]),t._v(" "),_("blockquote",[_("p",[t._v("差错检测：校验传输过程中的差错，部分方案提供纠错能力")])]),t._v(" "),_("p",[t._v("常见的差错检测方法有")]),t._v(" "),_("ul",[_("li",[t._v("奇偶校验：补充一个校验位，奇校验是要使得 1 的次数为奇数，偶校验是要使得 1 的次数为偶数。")]),t._v(" "),_("li",[t._v("检验和")]),t._v(" "),_("li",[t._v("CRC(Cyclic Redundance Check，循环冗余校验)")])]),t._v(" "),_("p",[t._v("其中链路层帧使用的是 CRC。")]),t._v(" "),_("h4",{attrs:{id:"大家都要用信道怎么办"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#大家都要用信道怎么办"}},[t._v("#")]),t._v(" 大家都要用信道怎么办")]),t._v(" "),_("p",[t._v("对应的基本服务叫做 "),_("strong",[t._v("多路访问")]),t._v("，共享信道上，大家都要用信道，谁先用，怎么用的问题，跟日常的道路交通问题类似。多路访问协议有")]),t._v(" "),_("ul",[_("li",[t._v("信道划分协议：划分为多条车道，各用各的\n"),_("ul",[_("li",[t._v("时分多路复用(TDM，Time-Division Multiplexing)：为接入结点分配时间帧")]),t._v(" "),_("li",[t._v("频分多路复用(FDM，Frequency-Division Multiplexing)：为节点分配不同频率")]),t._v(" "),_("li",[t._v("码分多址(CDMA)")])])]),t._v(" "),_("li",[t._v("随机接入协议：先上路再说，撞到南墙(信道拥堵)再回头，好了伤疤继续(一定延迟后重新发送)\n"),_("ul",[_("li",[t._v("载波侦听多路访问(CSMA)\n"),_("ul",[_("li",[t._v("载波侦听：说话之前先听，看看有没有人在发言")])])]),t._v(" "),_("li",[t._v("具有碰撞检测的 CSMA(CSMA/CD)\n"),_("ul",[_("li",[t._v("载波侦听")]),t._v(" "),_("li",[t._v("碰撞检测")])])])])]),t._v(" "),_("li",[t._v("轮流协议\n"),_("ul",[_("li",[t._v("轮询协议")]),t._v(" "),_("li",[t._v("令牌协议")])])])]),t._v(" "),_("p",[t._v("诸多技术方案，大概了解，关注 CSMA/CD，这是以太网用的。")]),t._v(" "),_("h4",{attrs:{id:"arp-rarp"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#arp-rarp"}},[t._v("#")]),t._v(" ARP/RARP")]),t._v(" "),_("p",[t._v("ARP 的功能，简单来说，已知 IP 求 MAC。如何知道呢？还是简单的套路 —— 不知道就广播，大喊一声！\narp 查询的基本流程可以简单概括为 "),_("strong",[t._v("先看缓存，广播查找，单播响应")]),t._v("。")]),t._v(" "),_("p",[t._v("查看缓存")]),t._v(" "),_("div",{staticClass:"language-bash line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-bash"}},[_("code",[_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Linux: arp -nv")]),t._v("\narp -lna\n\nNeighbor                Linklayer Address Expire"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("O"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" Expire"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("I"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    Netif Refs Prbs\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".0.1             "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("58")]),t._v(":41:20:a2:db:f8 2m9s      2m9s           en4    "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".0.103           "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(":bd:d8:88:ee:14  2m25s     2m25s          en4    "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".0.104           2e:61:74:4b:b8:40 1m27s     1m27s          en4    "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br"),_("span",{staticClass:"line-number"},[t._v("4")]),_("br"),_("span",{staticClass:"line-number"},[t._v("5")]),_("br"),_("span",{staticClass:"line-number"},[t._v("6")]),_("br"),_("span",{staticClass:"line-number"},[t._v("7")]),_("br")])]),_("p",[t._v("可以使用 arp 命令来huo")]),t._v(" "),_("div",{staticClass:"language-bash line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-bash"}},[_("code",[t._v("arp "),_("span",{pre:!0,attrs:{class:"token number"}},[t._v("192.168")]),t._v(".0.101\n\n"),_("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ? (192.168.0.103) at 6:bd:d8:88:ee:14 on en4 ifscope [ethernet]")]),t._v("\n")])]),t._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[t._v("1")]),_("br"),_("span",{staticClass:"line-number"},[t._v("2")]),_("br"),_("span",{staticClass:"line-number"},[t._v("3")]),_("br")])]),_("p",[t._v("RARP 是根据 MAC 获取 IP，现在已经基本不会用到了，可以简单理解为 DHCP 之前的早期技术。")]),t._v(" "),_("h4",{attrs:{id:"链路层设备"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#链路层设备"}},[t._v("#")]),t._v(" 链路层设备")]),t._v(" "),_("p",[t._v("由于两个设备之间，并不是直接的线路连接的，设备间的消息传输需要进行中转。涉及的设备是集线器和交换机。")]),t._v(" "),_("ul",[_("li",[t._v("集线器：将消息广播给所有的接入方")]),t._v(" "),_("li",[t._v("交换机：收集每个口接入的 MAC 地址，根据 MAC 地址进行转发")])]),t._v(" "),_("p",[t._v("由于在链路层，这一层的一些设备也称为所谓的二层设备，所以有二层交换机这种说法。")]),t._v(" "),_("h2",{attrs:{id:"物理层"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#物理层"}},[t._v("#")]),t._v(" 物理层")]),t._v(" "),_("p",[t._v("物理层就是真实的物理设备，比如网线，集线器(Hub)，交换机等。")]),t._v(" "),_("h2",{attrs:{id:"q-a"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#q-a"}},[t._v("#")]),t._v(" Q & A")]),t._v(" "),_("p",[_("check",{attrs:{id:"https-steps"}},[_("template",{slot:"label"},[t._v("TLS/SSL流程")]),t._v(" "),_("notes",[t._v("\nSSL 是综合使用了对称加密和非对称加密，非对称加密用于协商生成秘钥，对称加密用于数据传输的加解密。\n"),_("li",[t._v("客户端传输一个随机数 client_random 和支持的加密方法列表到 server")]),t._v(" "),_("li",[t._v("服务器传给客户端 server_random，加密方法列表和数字证书 给浏览器")]),t._v(" "),_("li",[t._v("浏览器验证公钥，生成 pre_random，用公钥加密传给服务器")]),t._v(" "),_("li",[t._v("服务器用 cilent_random，server_random 和 pre_random 使用公钥加密生成 secret")]),t._v(" "),_("li",[t._v("之后的数据传输，还是用 secret 作为秘钥，进行对称加密的解密")])])],2),t._v(" "),_("check",{attrs:{id:"hand-shake"}},[_("template",{slot:"label"},[t._v("简要说明 TCP 的三次握手和四次挥手")])],2),t._v(" "),_("check",{attrs:{id:"network-layers"}},[_("template",{slot:"label"},[t._v("介绍网络的分层结构，OSI，TCP/IP 和 5层结构")]),t._v(" "),_("notes")],2),t._v(" "),_("check",{attrs:{id:"http-status"}},[_("template",{slot:"label"},[t._v("常见的 HTTP 状态码")])],2),t._v(" "),_("check",{attrs:{id:"http-cache"}},[_("template",{slot:"label"},[t._v("介绍 HTTP 缓存，以及缓存策略的选择")])],2),t._v(" "),_("check",{attrs:{id:"http-request-type"}},[_("template",{slot:"label"},[t._v("介绍HTTP 的请求方式，举例说明何时使用")]),t._v(" "),_("notes",[_("li",[t._v("GET,POST: 最常用的接口请求")]),t._v(" "),_("li",[t._v("OPTIONS: 常见与 CORS 的所谓复杂请求中的预检请求")])])],2),t._v(" "),_("check",{attrs:{id:"post-content-type"}},[_("template",{slot:"label"},[t._v("POST 数据传输的几种格式有什么区别")]),t._v(" "),_("notes")],2)],1)])}),[],!1,null,null,null);v.default=s.exports}}]);