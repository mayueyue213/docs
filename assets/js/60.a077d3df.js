(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{411:function(t,s,a){"use strict";a.r(s);var n=a(23),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"草稿"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#草稿"}},[t._v("#")]),t._v(" 草稿")]),t._v(" "),a("h2",{attrs:{id:"客户端存储"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#客户端存储"}},[t._v("#")]),t._v(" 客户端存储")]),t._v(" "),a("p",[a("check",{attrs:{id:"client-store"}},[a("template",{slot:"label"},[t._v("常见的客户端存储方案介绍")])],2),t._v(" "),a("check",{attrs:{id:"store-diff"}},[a("template",{slot:"label"},[t._v("几种存储方式的区别")]),t._v(" "),a("notes",[t._v("从时效性，访问限制，空间大小等方面对比理解")])],2),t._v(" "),a("check",{attrs:{id:"cookie-set"}},[a("template",{slot:"label"},[t._v("设置 cookie 的几种方式")])],2),t._v(" "),a("check",{attrs:{id:"cookie-composition"}},[a("template",{slot:"label"},[t._v("cookie 的组成")])],2),t._v(" "),a("check",{attrs:{id:"http-only"}},[a("template",{slot:"label"},[t._v("简单介绍 HttpOnly")]),t._v(" "),a("notes",[t._v("可以在客户端和服务器端设置，但只能在服务器端读取。")])],2),t._v(" "),a("check",{attrs:{id:"cookie-attention"}},[a("template",{slot:"label"},[t._v("cookie 使用的注意事项")]),t._v(" "),a("notes",[t._v("别太大，别太多，注意敏感信息，非必要不使用，注意第三方cookie")])],2),t._v(" "),a("check",{attrs:{id:"indexedDB"}},[a("template",{slot:"label"},[t._v("indexedDB 什么场景适用")]),t._v(" "),a("notes",[t._v("用于大量存储结构化数据，没有网络的情况下也可用，就是减少频繁从数据库获取，降低这个交互的频度，相当于是有一个度的把握。")])],2)],1),t._v(" "),a("h2",{attrs:{id:"执行上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文"}},[t._v("#")]),t._v(" 执行上下文")]),t._v(" "),a("p",[a("check",{attrs:{id:"execute-contenxt"}},[t._v("什么是执行上下文")]),t._v(" "),a("check",{attrs:{id:"what-is-scope"}},[a("template",{slot:"label"},[t._v("什么是作用域")]),t._v(" "),a("notes",[t._v("\n作用域究竟是指范围，还是指规则？当我们谈作用域的时候，我们关心的是，如何找到一个变量的值，我觉得理解为限定空间查找变量的规则即可。比如说，我们关注的是变量，那么你就理解为所谓的”变量对象“，然后作用域链就是一个”变量对象链“，也未尝不可。\n")])],2),t._v(" "),a("check",{attrs:{id:"execute-ctx-and-scope"}},[t._v("执行上下文和作用域有什么区别和联系")]),t._v(" "),a("check",{attrs:{id:"variable-object"}},[a("template",{slot:"label"},[t._v("啥是变量对象和活动对象")]),t._v(" "),a("notes",[t._v("变量对象和活动对象都是老词了，老概念了，现在都换词了。变量对象(variable object)就是”保存所有变量和函数的对象“，其实我感觉蛮别扭的，或许换成 ctx，env 这样的名称，会感觉比较合适。\n有位老哥说过一个比喻 "),a("strong",[t._v("”只不过是鞋架上的鞋和脚上穿的鞋之间的区别“")]),t._v("，这俩没啥可以纠结的。")])],2)],1),t._v(" "),a("h2",{attrs:{id:"垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收"}},[t._v("#")]),t._v(" 垃圾回收")]),t._v(" "),a("p",[a("check",{attrs:{id:"garbage"}},[t._v("两种垃圾回收策略介绍，各有什么问题\n")]),t._v(" "),a("check",{attrs:{id:"garbage"}},[t._v("什么是内存泄漏，举个例子\n")])],1),t._v(" "),a("p",[a("mg",{attrs:{src:"/images/js/memory-recover.png",alt:"memory-recover"}})],1),t._v(" "),a("h2",{attrs:{id:"补充-函数的预解析和惰性解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#补充-函数的预解析和惰性解析"}},[t._v("#")]),t._v(" 补充-函数的预解析和惰性解析")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bark")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("voice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dog "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  voice"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'wang!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  bark\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\ndog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bark")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// wang!")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bark "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bark"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bark")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("p",[a("code",[t._v("bark()")]),t._v("的结果是 "),a("code",[t._v("undefined")]),t._v("，这涉及到惰性解析的知识。对于函数，编译器(此处不区分什么解析器了)有所谓的所谓的”预解析“和”惰性解析“")]),t._v(" "),a("ul",[a("li",[t._v("预解析：在正式解析之前快速做一波检查，看看依赖了啥外部变量。与作用域紧密相关，不生成 AST。")]),t._v(" "),a("li",[t._v("惰性解析：可以认为函数在不调用的情况下，并不会真正解析去生成AST。惰性解析与 this 紧密相关。")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dog "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  voice"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'wang!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bark")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("voice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[a("code",[t._v("dog.bark")]),t._v(" 属性不过只是一个函数引用，即使 bark 函数写在对象内部，在调用之前并不真正编译函数")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bark "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" dog"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bark"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("这个 bark 不过是直接获取了函数的引用，写在哪对于 this 没有什么区别。我们并不需要过于纠结为什么是这样，龟腚罢了。就跟"),a("code",[t._v("xxx.func()")]),t._v("字符串解析一样的，判断出来是以这样的方式调用，就设置 this 为 func 属性所在对象。")]),t._v(" "),a("h2",{attrs:{id:"其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),a("p",[a("check",{attrs:{id:"hand-write-bind"}},[t._v("手写"),a("code",[t._v("bind")]),t._v(" "),a("notes",[t._v("手写bind函数，与兼容性并没有关系，很多的实现是用了 apply，或者是 Symbol，如果是为了兼容性的话，那搞个锤子。手写的目的是理解其原理，可以通过实现判断语言的掌握程度，相关知识点的综合理解能力。")])],1)],1),t._v(" "),a("p",[a("check",{attrs:{id:"event-loop-www"}},[t._v("简单介绍事件循环")]),t._v(" "),a("check",{attrs:{id:"event-loop-macro-micro"}},[t._v("宏任务和微任务的区别")]),t._v(" "),a("check",{attrs:{id:"event-loop-node"}},[t._v("浏览器中事件循环和Nodejs中事件循环的区别")]),t._v(" "),a("check",{attrs:{id:"event-loop-render-opportunity"}},[t._v("什么是所谓的 ”rendering opportunity“")]),t._v(" "),a("check",{attrs:{id:"marco-api"}},[t._v("宏任务的例子")]),t._v(" "),a("check",{attrs:{id:"micro-api"}},[t._v("微任务的例子")])],1),t._v(" "),a("h2",{attrs:{id:"promise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[t._v("#")]),t._v(" Promise")]),t._v(" "),a("p",[a("check",{attrs:{id:"promise-what"}},[a("template",{slot:"label"},[t._v("了解 Promise 吗")]),t._v(" "),a("notes",[t._v("这里写这个问题，主要是让自己看到的时候，能够想想，如何去思考，去理解什么是“了解”，思考如何去组织表述语言。\n基本格式 - 执行器 - 状态机 - 静态方法 - 实例方法 - 特别情况(错误捕获) - 并行、串行请求 - Promise.all 和 Promise.allSettled 的特点，问题等\n")])],2),t._v(" "),a("check",{attrs:{id:"promise-for-what"}},[a("template",{slot:"label"},[t._v("Promise出现的背景，解决的痛点")])],2),t._v(" "),a("check",{attrs:{id:"then-catch-finally"}},[a("template",{slot:"label"},[t._v("finally 方法和 then，catch 的区别")])],2),t._v(" "),a("check",{attrs:{id:"promise-multitle"}},[a("template",{slot:"label"},[t._v("Promise实现串行请求的基本逻辑")])],2),t._v(" "),a("check",{attrs:{id:"promise-all-settled"}},[a("template",{slot:"label"},[t._v("Promise.allSettled实现的基本逻辑")])],2),t._v(" "),a("check",{attrs:{id:"promise-extend-lib"}},[a("template",{slot:"label"},[t._v("Promise的拓展类库了解么？举例说明")])],2),t._v(" "),a("check",{attrs:{id:"promise-polyfill"}},[a("template",{slot:"label"},[t._v("你的Promise polyfill方案")])],2)],1),t._v(" "),a("h2",{attrs:{id:"let"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#let"}},[t._v("#")]),t._v(" let")]),t._v(" "),a("p",[a("check",{attrs:{id:"object-const"}},[a("template",{slot:"label"},[a("code",[t._v("const")]),t._v("定义的对象还是可以修改属性，如何禁止修改")]),t._v(" "),a("notes",[a("code",[t._v("Object.seal")]),t._v("禁止添加新属性或删除属性，"),a("code",[t._v("Object.preventExtensions")]),t._v("禁止添加新属性，"),a("code",[t._v("Object.freeze")]),t._v("冻结不允许做任何修改。\n")])],2),t._v(" "),a("check",{attrs:{id:"var-let-const"}},[a("template",{slot:"label"},[a("code",[t._v("var")]),t._v(","),a("code",[t._v("let")]),t._v(","),a("code",[t._v("const")]),t._v("使用的最佳实践")])],2),t._v(" "),a("check",{attrs:{id:"var-let-const-scope"}},[a("template",{slot:"label"},[t._v("结合下面的例子，从执行上下文的角度，描述"),a("code",[t._v("let")]),t._v("和"),a("code",[t._v("const")]),t._v("是如何实现块级作用域")])],2)],1),t._v(" "),a("h2",{attrs:{id:"number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[t._v("#")]),t._v(" Number")]),t._v(" "),a("p",[a("check",{attrs:{id:"0.1+0.2"}},[a("template",{slot:"label"},[t._v("0.1 + 0.2 为什么不等于 0.3")])],2),t._v(" "),a("check",{attrs:{id:"ieee754"}},[a("template",{slot:"label"},[t._v("IEEE 754")])],2),t._v(" "),a("check",{attrs:{id:"zero-diff"}},[a("template",{slot:"label"},[t._v("如何区分 "),a("code",[t._v("+0")]),t._v(" 和 "),a("code",[t._v("-0")]),t._v("(两种实现)")])],2)],1),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'正'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'负'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("is")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// not supported ie")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[a("check",{attrs:{id:"NaN-judge"}},[a("template",{slot:"label"},[t._v("如何判断 "),a("code",[t._v("NaN")]),t._v("(四种实现)")])],2)],1),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法1，IE不支持")]),t._v("\nNumber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\nNumber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法2")]),t._v("\nx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'number'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 方法4")]),t._v("\nObject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("is")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br")])]),a("p",[a("check",{attrs:{id:"number_sign_bit"}},[a("template",{slot:"label"},[t._v("为何符号位1为负0为正")])],2),t._v(" "),a("check",{attrs:{id:"ieee754-special"}},[a("template",{slot:"label"},[t._v("IEEE 754 特殊值表示: "),a("code",[t._v("NaN")]),t._v(","),a("code",[t._v("Infinity")]),t._v(","),a("code",[t._v("-Infinity")])]),t._v(" "),a("notes",[t._v("\n根据指数域的不同，数值可以分为规格化、非规格化、特殊值，此处的三个特殊值，均是指数域全1\n"),a("li",[t._v("NaN: 指数域全1，但是尾数域不全为0的数")]),t._v(" "),a("ieee",{attrs:{type:"NaN"}}),a("br"),t._v(" "),a("li",[t._v("Infinity/-Infinity: 即指数域名全1，尾数域全0")]),t._v(" "),a("ieee",{attrs:{type:"Infinity"}}),a("br")],1)],2),t._v(" "),a("check",{attrs:{id:"max_safe_integer"}},[a("template",{slot:"label"},[t._v("Number.MAX_SAFE_INTEGER 如何理解")]),t._v(" "),a("notes",[t._v("\n参考"),a("a",{attrs:{href:"https://262.ecma-international.org/6.0/#sec-number.max_safe_integer"}},[t._v("ECMA")]),t._v("，关键在于 "),a("strong",[t._v("安全")]),t._v(" 的概念，简单可理解为能够保证 n 和 n + 1 都能准确表示，则 n 为安全整数。最大安全整数为 2^53 - 1\n")])],2),t._v(" "),a("check",{attrs:{id:"max-value"}},[a("template",{slot:"label"},[t._v("Number.MAX_VALUE 的二进制表示")]),t._v(" "),a("notes",[t._v("最大值，那么自然要指数域和尾数域都取最大值，同时指数域不能全为1，否则会被当做特殊值处理，那么这个时候"),a("code",[t._v("IEEE 754")]),t._v("表示为:\n"),a("ieee",{attrs:{type:"MAX_VALUE"}}),a("br"),t._v("\n作为一个非规格化的值，指数的计算是有偏置的，偏置计算后最大的值为1023，尾数域 52 位以及省略的一位"),a("code",[t._v("1.x")]),t._v("，加起来共"),a("code",[t._v("53")]),t._v("个"),a("code",[t._v("1")]),t._v("，那么"),a("code",[t._v("Number.MAX_VALUE.toString(2)")]),t._v("结果为"),a("code",[t._v("[1111...共53位}][00000...共971位]")]),t._v("，二进制表示字符串长度为"),a("code",[t._v("1024")]),t._v("。")],1)],2),t._v(" "),a("check",{attrs:{id:"max-value-infinity"}},[a("template",{slot:"label"},[t._v("大于 MAX_VALUE 的值表示为 Infinity，那为什么 Number.MAX_VALUE + 1 !== Infinity")]),t._v(" "),a("notes",[t._v("从"),a("code",[t._v("MAX_VALUE")]),t._v("和"),a("code",[t._v("Infinity")]),t._v("的"),a("code",[t._v("754")]),t._v("表示上看，MAX_VALUE的值为"),a("code",[t._v("1.1...*2^1023")]),t._v("，而"),a("code",[t._v("Infinity")]),t._v("为"),a("code",[t._v("1.0*2^1024")]),t._v("，这两个相差的不是一丁点。关键在于理解，那些大于MAX_VALUE的数，由于无法表示，都被自动转换为了 Infinity。")])],2),t._v(" "),a("check",{attrs:{id:"max-value-add-1"}},[a("template",{slot:"label"},[t._v("Number.MAX_VALUE - 1 === Number.MAX_VALUE 为"),a("code",[t._v("true")]),t._v("？")]),t._v(" "),a("notes",[t._v("这个问题其实与上一个问题是一类问题，在非安全整数范围内，都需要考虑"),a("code",[t._v("754")]),t._v("是否能够正确表示。"),a("code",[t._v("x - 1 === x")]),t._v("的情况，需要在安全整数范围内才符合我们的预期。"),a("code",[t._v("Number.MAX_VALUE - 1")]),t._v("在"),a("code",[t._v("754")]),t._v("中也是一个无法表示的数，最终表示就变成了"),a("code",[t._v("Number.MAX_VALUE")]),t._v("。上一个能够被表示的数如下:\n"),a("ieee",{attrs:{type:"MAX_VALUE_SMALLER"}})],1)],2)],1),t._v(" "),a("div",{staticClass:"language-js notes line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAX_VALUE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("969")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAX_VALUE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\nNumber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAX_VALUE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("pow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("970")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("MAX_VALUE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),t._v(" "),a("p",[a("check",{attrs:{id:"float-compare"}},[a("template",{slot:"label"},[t._v("判断两个浮点数相等")])],2),t._v(" "),a("check",{attrs:{id:"epsilon"}},[a("template",{slot:"label"},[t._v("为什么 Number.EPSILON 是 Math.pow(2, -52)")])],2),t._v(" "),a("check",{attrs:{id:"is-integer"}},[a("template",{slot:"label"},[t._v("检测一个数是否是整数")])],2)],1),t._v(" "),a("div",{staticClass:"language-js notes line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// m1")]),t._v("\nNumber"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isInterger")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// m2")]),t._v("\nMath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("floor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nMath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("floor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ceil")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// m3")]),t._v("\nx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// m4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\\"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[a("check",{attrs:{id:"to-interger"}},[a("template",{slot:"label"},[t._v("数字取整的方法")]),t._v(" "),a("notes",[t._v("不只是原生方法，还可以借助一些隐式转换等来实现。")])],2),t._v(" "),a("check",{attrs:{id:"parseInt"}},[a("template",{slot:"label"},[t._v("数值转换 - parseInt")]),t._v(" "),a("notes",[t._v("语法格式是"),a("code",[t._v("parseInt(string, radix)")]),t._v("，把握两点\n"),a("li",[t._v("始终指定第二参数"),a("code",[t._v("radix")]),t._v("，明确进制")]),t._v(" "),a("li",[t._v("首字符需是指定"),a("code",[t._v("radix")]),t._v("下的合法字符，如对于"),a("code",[t._v("10")]),t._v("进制，首字符需满足"),a("code",[t._v("/^[0-9+-]/i.test(string)")]),t._v("，否则均是 NaN，因此"),a("code",[t._v("parseInt('')")]),t._v("，"),a("code",[t._v("parseInt(' ')")]),t._v("都是 NaN。")])]),t._v(" "),a("notes",[t._v("额外说一下关于 radix > 10 的情况吧，数字加字母共"),a("code",[t._v("36")]),t._v("位，因此"),a("code",[t._v("radix")]),t._v("的范围 [2,36]，对于 11 进制， "),a("code",[t._v("a")]),t._v("是合法字符，对于 12 进制，"),a("code",[t._v("a")]),t._v("和"),a("code",[t._v("b")]),t._v("是合法字符，依此类推。这些内容，知道"),a("code",[t._v("2")]),t._v(","),a("code",[t._v("10")]),t._v(","),a("code",[t._v("16")]),t._v("三个进制咋转换就行了，知道便知道，不知道也没什么大不了的，不需要啥都知道，更不需要死记。")])],2)],1),t._v(" "),a("div",{staticClass:"language-js notes line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 10")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'b'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 11")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("36")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 30191")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Infinity 的 `I`是19进制的合法字符")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("parseInt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("19")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 18")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("p",[a("check",{attrs:{id:"parseFloat"}},[a("template",{slot:"label"},[t._v("数值转换 - parseFloat")]),t._v(" "),a("notes",[t._v("只要知道它只支持10进制就好了。parseFloat 和 Number.parseFloat 功能并没有什么不同，当然了，Number.parseFloat 用起来会让我这种强迫症更舒服一点，毕竟不喜欢用全局函数，然后就是支持性不同了。")])],2),t._v(" "),a("check",{attrs:{id:"Number()"}},[a("template",{slot:"label"},[t._v("数值转换 - Number()")]),t._v(" "),a("notes",[t._v("有以下核心要点\n"),a("li",[t._v("字符串转换时，如有任意非法字符则为 NaN，包括多个小数点的情况(如'1.2.3')")]),t._v(" "),a("li",[t._v("对象则会执行所谓的”拆箱转换“，即调用 "),a("code",[t._v("valueOf")]),t._v(" 和 "),a("code",[t._v("toString")]),t._v("，")]),t._v(" "),a("txt",{attrs:{orange:""}},[t._v("以下两个我还没有什么找到较好的理解逻辑")]),t._v(" "),a("li",[t._v("Number(undefined) 为 NaN")]),t._v(" "),a("li",[t._v("Number(null) 为 0")]),t._v("\n其他的细节就不在此做笔记，也不需要去记，从MDN或者书本里面抄一遍纯粹多余。\n")],1)],2)],1),t._v(" "),a("h3",{attrs:{id:"string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" String")]),t._v(" "),a("p",[t._v("对于"),a("code",[t._v("String")]),t._v("，熟练掌握"),a("code",[t._v("match")]),t._v("，"),a("code",[t._v("replace")]),t._v("等实例方法的使用，需要做到能够结合正则进行各种匹配，转换等。\n"),a("check",{attrs:{id:"diff-quotes"}},[a("template",{slot:"label"},[a("code",[t._v("'")]),t._v("和"),a("code",[t._v('"')]),t._v("对于有什么区别？")]),t._v(" "),a("notes",[t._v("长得不一样，按键敲起来也不一样 😂")])],2),t._v(" "),a("check",{attrs:{id:"js-encode"}},[a("template",{slot:"label"},[t._v("JS采用了什么编码？")]),t._v(" "),a("notes",[t._v("采用了两种"),a("code",[t._v("Unicode")]),t._v("编码混合策略，"),a("code",[t._v("UCS-2")]),t._v("和"),a("code",[t._v("UTF-16")]),t._v("。")])],2),t._v(" "),a("check",{attrs:{id:"code-unit-code-point"}},[a("template",{slot:"label"},[t._v("码元和码点是什么，两者区别")]),t._v(" "),a("notes",[t._v("在JS中，码元(Code Unit)是一个字符基本单元，码点(Code Point)是"),a("code",[t._v("Unicode")]),t._v("中一个字符的完整标识，码点由1个或者2个码元组成。打个比方，Code Point 之于 Code Unit，正如 Char/Int/Float 之于 Byte。")])],2),t._v(" "),a("check",{attrs:{id:"bmp"}},[a("template",{slot:"label"},[t._v("什么是BMP")]),t._v(" "),a("notes")],2),t._v(" "),a("check",{attrs:{id:"char-code-at-code-point-at"}},[a("template",{slot:"label"},[t._v("码元码点相关的几个方法")])],2),t._v(" "),a("check",{attrs:{id:"str-slicce"}},[a("template",{slot:"label"},[t._v("字符串提取的三个方法，有何区别")]),t._v(" "),a("notes",[t._v("\n个人基本都是使用"),a("code",[t._v("slice")]),t._v("通吃，不纠结\n"),a("li",[t._v("str.substring(indexStart[, indexEnd]): 对于非范围内下标处理为0，并且会自动调换起始位置。")]),t._v(" "),a("li",[t._v("str.slice(beginIndex[, endIndex]): 最常用")]),t._v(" "),a("li",[t._v("str.substr(start[, length]): "),a("txt",{attrs:{orange:""}},[t._v("不使用不被推荐的substr")])],1)])],2)],1),t._v(" "),a("p",[t._v("对于字符串截取，个人基本都是使用"),a("code",[t._v("slice")]),t._v("通吃。需要注意字符串的很多实用的方法，兼容性还是不行，比如"),a("code",[t._v("includes")]),t._v("等方法，这些需要谨慎使用。")]),t._v(" "),a("h3",{attrs:{id:"undefined"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#undefined"}},[t._v("#")]),t._v(" Undefined")]),t._v(" "),a("p",[t._v("我一般使用"),a("code",[t._v("typeof x === 'undefined'")]),t._v(" 进行"),a("code",[t._v("undefined")]),t._v("的判断。")]),t._v(" "),a("p",[t._v("虽说"),a("code",[t._v("undefined")]),t._v("不是一个关键字，从历史来看被覆盖是一个问题，但是主流的浏览器早就禁止覆盖"),a("code",[t._v("undefined")]),t._v("了。\n也许使用"),a("code",[t._v("void 0")]),t._v("或许是一个一劳永逸的解决方案，但是如果不需要兼容古老的浏览器，直接使用 "),a("code",[t._v("undefined")]),t._v(" 也是可以的。")]),t._v(" "),a("h3",{attrs:{id:"array"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array"}},[t._v("#")]),t._v(" Array")]),t._v(" "),a("p",[a("code",[t._v("Array")]),t._v("主要就是各方法熟练应用即可。\n"),a("check",{attrs:{id:"array-judege"}},[a("template",{slot:"label"},[t._v("如何判断数组类型 (三种实现)")]),t._v(" "),a("notes",[t._v("Array.isArray，Object.prototype.toString.call，arr instanceof Array，判断length属性等标志性属性")])],2),t._v(" "),a("check",{attrs:{id:"array-like-example"}},[a("template",{slot:"label"},[t._v("常见的类数组")]),t._v(" "),a("notes",[t._v("arguments, DOM List")])],2),t._v(" "),a("check",{attrs:{id:"array-like-transfer"}},[a("template",{slot:"label"},[t._v("类数组转数组 - 至少 3 种方法")]),t._v(" "),a("notes",[t._v("Array.from(arguments), Array.prototype.slice.call(arguments), "),a("code",[t._v("...")]),t._v("拓展运算符, 遍历进行元素复制")])],2),t._v(" "),a("check",{attrs:{id:"array-prototype"}},[a("template",{slot:"label"},[t._v("Array.prototype 是什么数据类型？Why?")]),t._v(" "),a("notes",[a("txt",{attrs:{red:""}},[t._v("不只是 Array.prototype，还有 Function.prototype，这些"),a("code",[t._v("prototype")]),t._v("究竟是什么类型，这个我还没有找到答案")])],1)],2)],1),t._v(" "),a("div",{staticClass:"language-js notes line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isArray")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'object'")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[a("check",{attrs:{id:"array-flatten"}},[a("template",{slot:"label"},[t._v("数组扁平化")]),t._v(" "),a("notes",[t._v("\n数组打平，再怎么折腾也是遍历，只不过是手写遍历还是直接调用迭代方法的区别，是结合具体情况是否需要递归的区别。\n"),a("li",[t._v("flat: 支持性还不够")]),t._v(" "),a("li",[t._v("toString,join: 转换为字符串后再处理，这两个方法得考虑数组元素的类型")]),t._v(" "),a("li",[t._v("遍历，递归")]),t._v("\n扁平化，我个人在实际开发过程中遇到的并不多，不觉得需要什么特别考虑，尤其是各种乱七八糟元素类型混杂的情况就更少了。\n")])],2)],1),t._v(" "),a("h3",{attrs:{id:"其他-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他-2"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),a("p",[a("check",{attrs:{id:"value-refer"}},[a("template",{slot:"label"},[t._v("函数参数传递是值传递还是引用传递？")])],2),t._v(" "),a("notes",[t._v("什么值传递，引用传递，然后再来特别说明下这个“值”是一个“引用”指针，累不累呀！纠结个锤子，知道是个啥拷贝，知道会不会影响原数据就行了。")])],1),t._v(" "),a("h2",{attrs:{id:"对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[t._v("#")]),t._v(" 对象")]),t._v(" "),a("p",[a("check",{attrs:{id:"object-equal"}},[a("template",{slot:"label"},[t._v("如何理解与判断对象的相等性")]),t._v(" "),a("notes",[t._v("如果使用"),a("code",[t._v("a === b")]),t._v("判断的是两个标识符是否指向同一个对象的引用，很多情况下，我们期望的“相等”，不过是属性值完全一样罢了。")])],2),t._v(" "),a("check",{attrs:{id:"new-steps"}},[a("template",{slot:"label"},[t._v("new 实例化的具体过程")])],2),t._v(" "),a("check",{attrs:{id:"object-traverse"}},[t._v("对象属性遍历的"),a("code",[t._v("5")]),t._v("种方法\n"),a("notes",[t._v("特别指出"),a("code",[t._v("5")]),t._v("种方法，并非要死记这些方法，只是因为这里对于思考问题有代表性。从需求的角度去考虑，作为一个服务提供方，这几种方法提供了较为全面的能力，能够满足多层次的需求。如今最常用的还是"),a("code",[t._v("Object.keys")]),t._v("和"),a("code",[t._v("for in")]),t._v("，但以后其他的几个遍历方法的使用也会多起来。\n"),a("li",[t._v("self, enumerable, no symbol: Object.keys(obj)")]),t._v(" "),a("li",[t._v("self, no symbol: Object.getOwnPropertyNames(obj)")]),t._v(" "),a("li",[t._v("self, only symbol: Object.getOwnPropertySymbols(obj)")]),t._v(" "),a("li",[t._v("self, all: Reflect.ownKeys(obj)")]),t._v(" "),a("li",[t._v("self, enumerable, no symbol, with extend's: for...in")])])],1),t._v(" "),a("check",{attrs:{id:"object-keys-for-in"}},[a("template",{slot:"label"},[t._v("Object.keys 和 for...in 的区别")]),t._v(" "),a("notes",[t._v("前者不查找原型链")])],2),t._v(" "),a("check",{attrs:{id:"ob-create"}},[a("template",{slot:"label"},[t._v("创建对象的多种方式(3+)")]),t._v(" "),a("notes",[t._v("对象字面量，Object.create，复制，new 实例化")])],2),t._v(" "),a("check",{attrs:{id:"constructor-func-diff"}},[a("template",{slot:"label"},[t._v("构造函数和普通函数的区别")]),t._v(" "),a("notes",[t._v("虽说构造函数与普通函数唯一的区别就是调用方式不同，但是那只是理论嘛。从实际来看，构造函数和普通函数长相差别很明显的嘛，本来不是用来做构造函数的，非当做构造函数去用，这么干起来有什么意思？能喝农药不代表真的能喝农药。")])],2),t._v(" "),a("check",{attrs:{id:"prototype-es5"}},[a("template",{slot:"label"},[t._v("以SuperType和SubType为例，使用构造函数实现继承示例")])],2),t._v(" "),a("check",{attrs:{id:"prototype-real"}},[a("template",{slot:"label"},[t._v("如何理解原型？原型真的是”原型“吗？")]),t._v(" "),a("notes",[t._v("每个构造函数都有一个原型，原型就是一个对象，是用来在实例间共享的。我觉得原型这个名称有点名不符实。生成对象长啥样更多是由构造方法决定的，原型只是用来共享属性和方法，然而却称为对象的原型，这个叫法细究起来是有点奇怪的。")])],2),t._v(" "),a("check",{attrs:{id:"prototype-diagram"}},[a("template",{slot:"label"},[t._v("画出构造函数，原型和实例之间的关系图")])],2),t._v(" "),a("check",{attrs:{id:"prototype-get-set"}},[a("template",{slot:"label"},[t._v("原型相关的判断、获取和设置方法")]),t._v(" "),a("notes",[a("li",[t._v("Object.getPrototypeOf/Object.setPrototypeOf")]),t._v(" "),a("li",[t._v("Reflect.getPrototypeOf/Reflect.setPrototypeOf")]),t._v(" "),a("li",[t._v("Person.prototype = xxxx")]),t._v(" "),a("li",[t._v("Person.prototype.isPrototypeOf(person1)")])])],2),t._v(" "),a("check",{attrs:{id:"prototype-link"}},[a("template",{slot:"label"},[t._v("如何理解原型链")]),t._v(" "),a("notes",[t._v("原型链涉及的两个对象是实例对象和原型对象。最末端是一个实例 instance，而 instance 的 [[prototype]] 又是另一个类型的实例，依此类推，直到最终原型为null，串起来的链条就是原型链。")])],2),t._v(" "),a("check",{attrs:{id:"proto-problem"}},[a("template",{slot:"label"},[t._v("原型链的问题")]),t._v(" "),a("notes",[t._v("只要稍微想一下下方代码所示的使用原实现继承的基本结构，不难想到其存在的问题，子类实例所继承的原型对象，在"),a("code",[t._v("new SuperType")]),t._v("时就确定了，这不过相当于共享了一个对象\n"),a("li",[t._v("原型中包含引用值: 虽然不能通过实例重写原型对象上的值，但对于原型上的属性，就像是"),a("code",[t._v("const")]),t._v("声明的常量一样，虽然不能重新赋值，但如果是引用类型，是可以修改其子属性的。")]),t._v(" "),a("li",[t._v("子类实例化不能给父类型构造函数传参：由于原型是"),a("code",[t._v("SubType.prototype = new SuperType()")]),t._v("，这意味着"),a("code",[t._v("SubType")]),t._v("的实例拥有同一个原型对象，也无法支持"),a("code",[t._v("SuperType")]),t._v("传递参数进行实例化。")]),t._v("\n由于这两个问题的存在，对于"),a("code",[t._v("JS")]),t._v("中使用原型链实现继承时，通常只是方法和常量的共享，而可变属性会在构造函数中定义\n")])],2)],1),t._v(" "),a("div",{staticClass:"language-js notes line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SuperType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("￼\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SubType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SubType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SuperType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[a("check",{attrs:{id:"constoructor-model"}},[a("template",{slot:"label"},[t._v("什么是构造函数模式和原型模式")]),t._v(" "),a("notes",[t._v("构造函数模式，就是使用构造函数去生成对象，最关键的一点是 —— "),a("strong",[t._v("所有的属性，方法，都在构造函数内部设置")]),t._v("。"),a("txt",{attrs:{bold:""}},[t._v("问题很明显嘛，每个实例都要完全执行一遍，没有复用呀。")])],1),t._v(" "),a("notes",[t._v("原型模式，就是把共用的部分提取到 prototype 上，利用原型链来实现共享。")])],2),t._v(" "),a("check",{attrs:{id:"classic-inherit"}},[a("template",{slot:"label"},[t._v("什么是经典继承")]),t._v(" "),a("notes",[t._v("经典继承也叫”盗用构造函数“，是为了解决原型链的第一个问题 "),a("strong",[t._v("原型中包含应用值")]),t._v(" 问题的。如下方的代码所示，经典继承的核心代码就是"),a("code",[t._v("SuperType.call(this)")]),t._v("。")]),t._v(" "),a("notes",[t._v("经典继承，不过是在"),a("code",[t._v("SupType")]),t._v("的实例上，同时执行了"),a("code",[t._v("SupType")]),t._v("和"),a("code",[t._v("SuperType")]),t._v("的构造函数。经典继承的问题很明显 —— 所有内容都必须在"),a("code",[t._v("SuperType")]),t._v("执行过程中定义，"),a("code",[t._v("SuperType.prototype")]),t._v("的内容是无法继承的。"),a("txt",{attrs:{orange:""}})],1)],2)],1),t._v(" "),a("div",{staticClass:"language-js notes line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SuperType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("options")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("xxx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xxx'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SuperType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SubType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("options")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SuperType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])]),a("p",[a("check",{attrs:{id:"ombination-inherit"}},[a("template",{slot:"label"},[t._v("什么是组合继承")]),t._v(" "),a("notes",[t._v("组合继承，是组合什么呢？是”经典继承“和”原型继承”，既调用"),a("code",[t._v("SuperType.call(this, args)")]),t._v("来进行子类实例化，也使用"),a("code",[t._v("SupType.prototype = new SuperType()")]),t._v("设置原型进行共享。")])],2),t._v(" "),a("check",{attrs:{id:"prototype-inherit"}},[a("template",{slot:"label"},[t._v("什么是原型式继承和寄生式继承")]),t._v(" "),a("notes",[a("txt",{attrs:{bold:""}},[t._v("这两种继承方式，出发点就是不要定义这个那个构造函数，也不要"),a("code",[t._v("new")]),t._v("这个"),a("code",[t._v("new")]),t._v("那个，简单干脆地实现对象之间的信息共享。")])],1),t._v(" "),a("notes",[a("strong",[t._v("原型式继承，就是直接设置一个对象为某个构造函数的原型")]),t._v("，"),a("code",[t._v("Object.create")]),t._v("就是原型式继承的规范化实现。我觉得吧，这一堆什么xxx继承的，就是名头喊得响，现在说”原型式继承“这样的说法都有点尬，反正知道在需要的时候使用"),a("code",[t._v("Object.create")]),t._v("就行了。")]),t._v(" "),a("notes",[a("strong",[t._v("寄生式继承，就是复制一个对象，再添加一些属性，以新对象为某个构造函数的原型")]),t._v("。")]),t._v(" "),a("notes",[a("txt",{attrs:{orange:""}},[t._v("我觉得“原型式继承”这个名称很不好，太容易导致混乱了，如果说原型式继承是上面加粗所说的定义，那么使用"),a("code",[t._v("SupType.prototype = new SuperType()")]),t._v("叫什么？")])],1)],2)],1),t._v(" "),a("div",{staticClass:"language-js notes line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 原型式继承")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("o")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("￼\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("F")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("￼\n  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("F")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" o"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("￼\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("F")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("￼\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" tools "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("quack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'gaga'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" newTools "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tools"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nnewTools"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("quack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// gaga")]),t._v("\ntools"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("quack")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'wangwang'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nnewTools"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("quack")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// wangwang")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 寄生式继承")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createAnother")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("original")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" clone "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("original"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 通过调用函数创建一个新对象")]),t._v("\n  clone"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("sayHi")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 以某种方式增强这个对象")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hi"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" clone"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回这个对象 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br")])]),a("p",[a("check",{attrs:{id:"proto-mixin"}},[a("template",{slot:"label"},[t._v("什么是寄生式组合继承")]),t._v(" "),a("notes",[a("li",[t._v("寄生，意味着复制某个对象，然后添加一下新属性，用新对象作为"),a("code",[t._v("SupType.prototype")])]),t._v(" "),a("li",[t._v("组合，意味着使用经典继承和原型链继承，在"),a("code",[t._v("SubType")]),t._v("中调用"),a("code",[t._v("SuperType.call(this)")]),t._v("，同时会设置"),a("code",[t._v("SupType.prototype")])]),t._v("\n这个类型的继承，关键在于"),a("code",[t._v("SubType.prototype")]),t._v("是基于"),a("code",[t._v("SuperType.prototype")]),t._v("复制而来\n")])],2)],1),t._v(" "),a("div",{staticClass:"language-js notes line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SuperType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("options")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("xxx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xxx'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SubType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("options")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("SuperType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" options"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" proto "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SuperType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nproto"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" SubType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SubType")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" proto"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("h2",{attrs:{id:"webpack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack"}},[t._v("#")]),t._v(" webpack")]),t._v(" "),a("h2",{attrs:{id:"babel"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#babel"}},[t._v("#")]),t._v(" babel")]),t._v(" "),a("p",[a("check",{attrs:{id:"what"}},[a("template",{slot:"label"},[t._v("简单描述一下 "),a("code",[t._v("Babel")]),t._v("，主要功能，核心组成，使用")])],2),t._v(" "),a("check",{attrs:{id:"cli-use"}},[a("template",{slot:"label"},[t._v("简单说明 "),a("code",[t._v("CLI")]),t._v(" 方式下的 "),a("code",[t._v("Babel")]),t._v(" 使用，常用参数")]),t._v(" "),a("notes",[t._v("命令行工具的使用，无非就是一些参数的使用，常用的就是"),a("code",[t._v("--out-dir")]),t._v("，"),a("code",[t._v("--plugin")]),t._v("，"),a("code",[t._v("--preset")]),t._v("等，当然大多数情况下都只是间接使用 Babel，而不是直接通过 CLI。 ")])],2),t._v(" "),a("check",{attrs:{id:"multibal-types"}},[a("template",{slot:"label"},[t._v("Babel 的各种配置方式")]),t._v(" "),a("notes",[t._v("babel.config.json,.babelrc.json(.babelrc),package.json,CLI,API")])],2),t._v(" "),a("check",{attrs:{id:"babelrc-babel.config"}},[a("template",{slot:"label"},[a("code",[t._v("babel.config.json")]),t._v("和"),a("code",[t._v(".babelrc.json")]),t._v("的区别")]),t._v(" "),a("notes",[t._v("以一个包管理工程为例，前者在"),a("code",[t._v("root")]),t._v("目录做公共的基础配置，后者用于子包的个性化配置。")])],2),t._v(" "),a("check",{attrs:{id:"what-is-preset"}},[a("template",{slot:"label"},[a("code",[t._v("preset")]),t._v(" 是什么？")]),t._v(" "),a("notes")],2),t._v(" "),a("check",{attrs:{id:"what-is-preset-env"}},[a("template",{slot:"label"},[a("code",[t._v("preset-env")]),t._v(" 简单介绍")]),t._v(" "),a("notes")],2),t._v(" "),a("check",{attrs:{id:"most-use-plugins"}},[a("template",{slot:"label"},[t._v("列举一些常用的 "),a("code",[t._v("Plugin")]),t._v(" 并简单说明")]),t._v(" "),a("notes")],2),t._v(" "),a("check",{attrs:{id:"how-targets-work"}},[a("template",{slot:"label"},[a("code",[t._v("targets")]),t._v(" 背后的逻辑")]),t._v(" "),a("notes")],2),t._v(" "),a("check",{attrs:{id:"none-any-params"}},[a("template",{slot:"label"},[t._v("如果没有指定任何的 plugin，babel 会做什么？")]),t._v(" "),a("notes")],2),t._v(" "),a("check",{attrs:{id:"corejs"}},[a("template",{slot:"label"},[t._v("如何理解"),a("code",[t._v("core-js")]),t._v("，简单介绍")]),t._v(" "),a("notes")],2),t._v(" "),a("check",{attrs:{id:"useBuiltIns"}},[a("template",{slot:"label"},[t._v("介绍 "),a("code",[t._v("useBuiltIns")]),t._v(" 属性的配置")]),t._v(" "),a("notes")],2),t._v(" "),a("check",{attrs:{id:"monorepot"}},[a("template",{slot:"label"},[t._v("what is "),a("code",[t._v("monorepo")])]),t._v(" "),a("notes")],2),t._v(" "),a("check",{attrs:{id:"babelrcRoots"}},[a("template",{slot:"label"},[a("code",[t._v("babelrcRoots")]),t._v(" 的作用是什么")]),t._v(" "),a("notes")],2),t._v(" "),a("check",{attrs:{id:"stage-0-4"}},[a("template",{slot:"label"},[a("code",[t._v("stage-x")]),t._v("介绍")]),t._v(" "),a("notes")],2),t._v(" "),a("check",{attrs:{id:"babel-packages"}},[a("template",{slot:"label"},[t._v("列举一些 "),a("code",[t._v("@bable/xxx")]),t._v(" 包，并进行简单介绍")]),t._v(" "),a("notes")],2)],1)])}),[],!1,null,null,null);s.default=e.exports}}]);